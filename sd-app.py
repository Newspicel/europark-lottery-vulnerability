import requests
import colorama
from datetime import datetime
import os
import threading
import qrcode

admin_data = '{"userId":"6ea1e2a7-b60c-4ca5-a997-6ba55183424a","password":"admin"}'

admin_backend_data = '{"userId": "ad155ef7-6544-434e-a168-5bf80a10f48c", "password": "cook"}'

def getConfig(token):
    headers = {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer ' + token
    }
    response = requests.get(
        'https://sdapp.europapark.de/config', headers=headers)
    return response.json()


def adminLogin():
    headers = {
        'Content-Type': 'application/json'
    }
    response = requests.post(
        'https://sdapp.europapark.de/auth/login', headers=headers, data=admin_data)
    return response.json()


def createUser():
    headers = {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer ' + adminLogin()["token"]
    }
    data = '{"password":"default"}'
    response = requests.post(
        'https://sdapp.europapark.de/users/create', headers=headers, data=data)
    return response.json()


def playLottery(token):
    headers = {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer ' + token
    }

    response = requests.post(
        'https://sdapp.europapark.de/lottery', headers=headers)
    return response.json()


def checkPrize(token, prizeid):
    headers = {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer ' + token
    }

    data = {
        "prizeId": prizeid
    }
    response = requests.post(
        'https://sdapp.europapark.de/check', headers=headers, json=data)
    return response.json()


def groupCreate(token):
    headers = {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer ' + token
    }

    response = requests.post(
        'https://sdapp.europapark.de/groups/create', headers=headers)
    return response.json()


def groupAddUser(token, groupId, userid):
    headers = {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer ' + token
    }

    data = {
        "groupId": groupId,
        "userId": userid
    }
    response = requests.post(
        'https://sdapp.europapark.de/groups/add', headers=headers, json=data)
    return response.json()


def groupTracing(token):
    headers = {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer ' + token
    }

    response = requests.get(
        'https://sdapp.europapark.de/groups/tracingIds', headers=headers)
    return response.json()


def tracingGenerate(token):
    headers = {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer ' + token
    }

    response = requests.post(
        'https://sdapp.europapark.de/tracing/generate', headers=headers)
    return response.json()


def play():
    user = createUser()
    lottery_result = playLottery(user["token"])

    while(lottery_result['status'] != 'won'):
        user = createUser()
        lottery_result = playLottery(user["token"])

        # Red Lose
        if lottery_result['status'] == 'lost':
            print(colorama.Fore.RED + "Lost: " +
                  user["userId"] + " " + colorama.Fore.RESET + str(lottery_result))

    print(colorama.Fore.GREEN + "Won: " +
          user["userId"] + " " + colorama.Fore.RESET + str(lottery_result))

    img = qrcode.make(lottery_result['prizeId'])
    path = '.result/' + datetime.now().strftime("%Y/%m/%d") + '/'
    os.makedirs(path, exist_ok=True)
    img.save(path + lottery_result['prizeId'] + '.png')

# print(getConfig())

# main_user = createUser()
# group = groupCreate(main_user["token"])


# for i in range(0,5):
#     user = createUser()
#     groupAddUser(main_user["token"], group["groupId"], user["userId"])


# test = groupTracing(main_user["token"])
# print(playLottery(main_user["token"]))
# print(test)

for i in range(0, 40):
    threading.Thread(target=play).start()
